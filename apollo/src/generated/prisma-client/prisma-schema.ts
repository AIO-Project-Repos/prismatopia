// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateLambdaRole {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductRole {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateProjectNote {
  count: Int!
}

type AggregateProjectRole {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type LambdaRole {
  id: ID!
  person: Person!
  role: Role!
  createdAt: DateTime
  updatedAt: DateTime
}

type LambdaRoleConnection {
  pageInfo: PageInfo!
  edges: [LambdaRoleEdge]!
  aggregate: AggregateLambdaRole!
}

input LambdaRoleCreateInput {
  id: ID
  person: PersonCreateOneInput!
  role: RoleCreateOneInput!
}

type LambdaRoleEdge {
  node: LambdaRole!
  cursor: String!
}

enum LambdaRoleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LambdaRolePreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
}

type LambdaRoleSubscriptionPayload {
  mutation: MutationType!
  node: LambdaRole
  updatedFields: [String!]
  previousValues: LambdaRolePreviousValues
}

input LambdaRoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LambdaRoleWhereInput
  AND: [LambdaRoleSubscriptionWhereInput!]
  OR: [LambdaRoleSubscriptionWhereInput!]
  NOT: [LambdaRoleSubscriptionWhereInput!]
}

input LambdaRoleUpdateInput {
  person: PersonUpdateOneRequiredInput
  role: RoleUpdateOneRequiredInput
}

input LambdaRoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  person: PersonWhereInput
  role: RoleWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LambdaRoleWhereInput!]
  OR: [LambdaRoleWhereInput!]
  NOT: [LambdaRoleWhereInput!]
}

input LambdaRoleWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLambdaRole(data: LambdaRoleCreateInput!): LambdaRole!
  updateLambdaRole(data: LambdaRoleUpdateInput!, where: LambdaRoleWhereUniqueInput!): LambdaRole
  upsertLambdaRole(where: LambdaRoleWhereUniqueInput!, create: LambdaRoleCreateInput!, update: LambdaRoleUpdateInput!): LambdaRole!
  deleteLambdaRole(where: LambdaRoleWhereUniqueInput!): LambdaRole
  deleteManyLambdaRoles(where: LambdaRoleWhereInput): BatchPayload!
  createPerson(data: PersonCreateInput!): Person!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateManyPersons(data: PersonUpdateManyMutationInput!, where: PersonWhereInput): BatchPayload!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createProductRole(data: ProductRoleCreateInput!): ProductRole!
  updateProductRole(data: ProductRoleUpdateInput!, where: ProductRoleWhereUniqueInput!): ProductRole
  upsertProductRole(where: ProductRoleWhereUniqueInput!, create: ProductRoleCreateInput!, update: ProductRoleUpdateInput!): ProductRole!
  deleteProductRole(where: ProductRoleWhereUniqueInput!): ProductRole
  deleteManyProductRoles(where: ProductRoleWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createProjectNote(data: ProjectNoteCreateInput!): ProjectNote!
  updateProjectNote(data: ProjectNoteUpdateInput!, where: ProjectNoteWhereUniqueInput!): ProjectNote
  updateManyProjectNotes(data: ProjectNoteUpdateManyMutationInput!, where: ProjectNoteWhereInput): BatchPayload!
  upsertProjectNote(where: ProjectNoteWhereUniqueInput!, create: ProjectNoteCreateInput!, update: ProjectNoteUpdateInput!): ProjectNote!
  deleteProjectNote(where: ProjectNoteWhereUniqueInput!): ProjectNote
  deleteManyProjectNotes(where: ProjectNoteWhereInput): BatchPayload!
  createProjectRole(data: ProjectRoleCreateInput!): ProjectRole!
  updateProjectRole(data: ProjectRoleUpdateInput!, where: ProjectRoleWhereUniqueInput!): ProjectRole
  upsertProjectRole(where: ProjectRoleWhereUniqueInput!, create: ProjectRoleCreateInput!, update: ProjectRoleUpdateInput!): ProjectRole!
  deleteProjectRole(where: ProjectRoleWhereUniqueInput!): ProjectRole
  deleteManyProjectRoles(where: ProjectRoleWhereInput): BatchPayload!
  createRole(data: RoleCreateInput!): Role!
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Person {
  id: ID!
  firstname: String
  lastname: String
  timezone: String
  program: String
  email: String
  githubId: String
  slackId: String
  profilePicURL: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  id: ID
  firstname: String
  lastname: String
  timezone: String
  program: String
  email: String
  githubId: String
  slackId: String
  profilePicURL: String
}

input PersonCreateOneInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

type PersonEdge {
  node: Person!
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  timezone_ASC
  timezone_DESC
  program_ASC
  program_DESC
  email_ASC
  email_DESC
  githubId_ASC
  githubId_DESC
  slackId_ASC
  slackId_DESC
  profilePicURL_ASC
  profilePicURL_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PersonPreviousValues {
  id: ID!
  firstname: String
  lastname: String
  timezone: String
  program: String
  email: String
  githubId: String
  slackId: String
  profilePicURL: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
  AND: [PersonSubscriptionWhereInput!]
  OR: [PersonSubscriptionWhereInput!]
  NOT: [PersonSubscriptionWhereInput!]
}

input PersonUpdateDataInput {
  firstname: String
  lastname: String
  timezone: String
  program: String
  email: String
  githubId: String
  slackId: String
  profilePicURL: String
}

input PersonUpdateInput {
  firstname: String
  lastname: String
  timezone: String
  program: String
  email: String
  githubId: String
  slackId: String
  profilePicURL: String
}

input PersonUpdateManyMutationInput {
  firstname: String
  lastname: String
  timezone: String
  program: String
  email: String
  githubId: String
  slackId: String
  profilePicURL: String
}

input PersonUpdateOneInput {
  create: PersonCreateInput
  update: PersonUpdateDataInput
  upsert: PersonUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PersonWhereUniqueInput
}

input PersonUpdateOneRequiredInput {
  create: PersonCreateInput
  update: PersonUpdateDataInput
  upsert: PersonUpsertNestedInput
  connect: PersonWhereUniqueInput
}

input PersonUpsertNestedInput {
  update: PersonUpdateDataInput!
  create: PersonCreateInput!
}

input PersonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  timezone: String
  timezone_not: String
  timezone_in: [String!]
  timezone_not_in: [String!]
  timezone_lt: String
  timezone_lte: String
  timezone_gt: String
  timezone_gte: String
  timezone_contains: String
  timezone_not_contains: String
  timezone_starts_with: String
  timezone_not_starts_with: String
  timezone_ends_with: String
  timezone_not_ends_with: String
  program: String
  program_not: String
  program_in: [String!]
  program_not_in: [String!]
  program_lt: String
  program_lte: String
  program_gt: String
  program_gte: String
  program_contains: String
  program_not_contains: String
  program_starts_with: String
  program_not_starts_with: String
  program_ends_with: String
  program_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  githubId: String
  githubId_not: String
  githubId_in: [String!]
  githubId_not_in: [String!]
  githubId_lt: String
  githubId_lte: String
  githubId_gt: String
  githubId_gte: String
  githubId_contains: String
  githubId_not_contains: String
  githubId_starts_with: String
  githubId_not_starts_with: String
  githubId_ends_with: String
  githubId_not_ends_with: String
  slackId: String
  slackId_not: String
  slackId_in: [String!]
  slackId_not_in: [String!]
  slackId_lt: String
  slackId_lte: String
  slackId_gt: String
  slackId_gte: String
  slackId_contains: String
  slackId_not_contains: String
  slackId_starts_with: String
  slackId_not_starts_with: String
  slackId_ends_with: String
  slackId_not_ends_with: String
  profilePicURL: String
  profilePicURL_not: String
  profilePicURL_in: [String!]
  profilePicURL_not_in: [String!]
  profilePicURL_lt: String
  profilePicURL_lte: String
  profilePicURL_gt: String
  profilePicURL_gte: String
  profilePicURL_contains: String
  profilePicURL_not_contains: String
  profilePicURL_starts_with: String
  profilePicURL_not_starts_with: String
  profilePicURL_ends_with: String
  profilePicURL_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
}

input PersonWhereUniqueInput {
  id: ID
}

type Product {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  name: String!
  projects: ProjectCreateManyWithoutProductInput
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutProjectsInput {
  create: ProductCreateWithoutProjectsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutProjectsInput {
  id: ID
  name: String!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductRole {
  id: ID!
  person: Person!
  product: Product!
  role: Role!
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductRoleConnection {
  pageInfo: PageInfo!
  edges: [ProductRoleEdge]!
  aggregate: AggregateProductRole!
}

input ProductRoleCreateInput {
  id: ID
  person: PersonCreateOneInput!
  product: ProductCreateOneInput!
  role: RoleCreateOneInput!
}

type ProductRoleEdge {
  node: ProductRole!
  cursor: String!
}

enum ProductRoleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductRolePreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductRoleSubscriptionPayload {
  mutation: MutationType!
  node: ProductRole
  updatedFields: [String!]
  previousValues: ProductRolePreviousValues
}

input ProductRoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductRoleWhereInput
  AND: [ProductRoleSubscriptionWhereInput!]
  OR: [ProductRoleSubscriptionWhereInput!]
  NOT: [ProductRoleSubscriptionWhereInput!]
}

input ProductRoleUpdateInput {
  person: PersonUpdateOneRequiredInput
  product: ProductUpdateOneRequiredInput
  role: RoleUpdateOneRequiredInput
}

input ProductRoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  person: PersonWhereInput
  product: ProductWhereInput
  role: RoleWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductRoleWhereInput!]
  OR: [ProductRoleWhereInput!]
  NOT: [ProductRoleWhereInput!]
}

input ProductRoleWhereUniqueInput {
  id: ID
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateDataInput {
  name: String
  projects: ProjectUpdateManyWithoutProductInput
}

input ProductUpdateInput {
  name: String
  projects: ProjectUpdateManyWithoutProductInput
}

input ProductUpdateManyMutationInput {
  name: String
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateOneRequiredWithoutProjectsInput {
  create: ProductCreateWithoutProjectsInput
  update: ProductUpdateWithoutProjectsDataInput
  upsert: ProductUpsertWithoutProjectsInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateWithoutProjectsDataInput {
  name: String
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithoutProjectsInput {
  update: ProductUpdateWithoutProjectsDataInput!
  create: ProductCreateWithoutProjectsInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
  name: String
}

type Project {
  id: ID!
  name: String!
  product: Product!
  start: DateTime
  end: DateTime
  projectRoles(where: ProjectRoleWhereInput, orderBy: ProjectRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRole!]
  projectNotes(where: ProjectNoteWhereInput, orderBy: ProjectNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectNote!]
  createdAt: DateTime
  updatedAt: DateTime
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  name: String!
  product: ProductCreateOneWithoutProjectsInput!
  start: DateTime
  end: DateTime
  projectRoles: ProjectRoleCreateManyWithoutProjectInput
  projectNotes: ProjectNoteCreateManyWithoutProjectInput
}

input ProjectCreateManyWithoutProductInput {
  create: [ProjectCreateWithoutProductInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutProjectNotesInput {
  create: ProjectCreateWithoutProjectNotesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutProjectRolesInput {
  create: ProjectCreateWithoutProjectRolesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutProductInput {
  id: ID
  name: String!
  start: DateTime
  end: DateTime
  projectRoles: ProjectRoleCreateManyWithoutProjectInput
  projectNotes: ProjectNoteCreateManyWithoutProjectInput
}

input ProjectCreateWithoutProjectNotesInput {
  id: ID
  name: String!
  product: ProductCreateOneWithoutProjectsInput!
  start: DateTime
  end: DateTime
  projectRoles: ProjectRoleCreateManyWithoutProjectInput
}

input ProjectCreateWithoutProjectRolesInput {
  id: ID
  name: String!
  product: ProductCreateOneWithoutProjectsInput!
  start: DateTime
  end: DateTime
  projectNotes: ProjectNoteCreateManyWithoutProjectInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

type ProjectNote {
  id: ID!
  project: Project!
  topic: String!
  note: String!
  createdBy: Person
  createdAt: DateTime
  updatedAt: DateTime
}

type ProjectNoteConnection {
  pageInfo: PageInfo!
  edges: [ProjectNoteEdge]!
  aggregate: AggregateProjectNote!
}

input ProjectNoteCreateInput {
  id: ID
  project: ProjectCreateOneWithoutProjectNotesInput!
  topic: String!
  note: String!
  createdBy: PersonCreateOneInput
}

input ProjectNoteCreateManyWithoutProjectInput {
  create: [ProjectNoteCreateWithoutProjectInput!]
  connect: [ProjectNoteWhereUniqueInput!]
}

input ProjectNoteCreateWithoutProjectInput {
  id: ID
  topic: String!
  note: String!
  createdBy: PersonCreateOneInput
}

type ProjectNoteEdge {
  node: ProjectNote!
  cursor: String!
}

enum ProjectNoteOrderByInput {
  id_ASC
  id_DESC
  topic_ASC
  topic_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectNotePreviousValues {
  id: ID!
  topic: String!
  note: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ProjectNoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  topic: String
  topic_not: String
  topic_in: [String!]
  topic_not_in: [String!]
  topic_lt: String
  topic_lte: String
  topic_gt: String
  topic_gte: String
  topic_contains: String
  topic_not_contains: String
  topic_starts_with: String
  topic_not_starts_with: String
  topic_ends_with: String
  topic_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectNoteScalarWhereInput!]
  OR: [ProjectNoteScalarWhereInput!]
  NOT: [ProjectNoteScalarWhereInput!]
}

type ProjectNoteSubscriptionPayload {
  mutation: MutationType!
  node: ProjectNote
  updatedFields: [String!]
  previousValues: ProjectNotePreviousValues
}

input ProjectNoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectNoteWhereInput
  AND: [ProjectNoteSubscriptionWhereInput!]
  OR: [ProjectNoteSubscriptionWhereInput!]
  NOT: [ProjectNoteSubscriptionWhereInput!]
}

input ProjectNoteUpdateInput {
  project: ProjectUpdateOneRequiredWithoutProjectNotesInput
  topic: String
  note: String
  createdBy: PersonUpdateOneInput
}

input ProjectNoteUpdateManyDataInput {
  topic: String
  note: String
}

input ProjectNoteUpdateManyMutationInput {
  topic: String
  note: String
}

input ProjectNoteUpdateManyWithoutProjectInput {
  create: [ProjectNoteCreateWithoutProjectInput!]
  delete: [ProjectNoteWhereUniqueInput!]
  connect: [ProjectNoteWhereUniqueInput!]
  set: [ProjectNoteWhereUniqueInput!]
  disconnect: [ProjectNoteWhereUniqueInput!]
  update: [ProjectNoteUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [ProjectNoteUpsertWithWhereUniqueWithoutProjectInput!]
  deleteMany: [ProjectNoteScalarWhereInput!]
  updateMany: [ProjectNoteUpdateManyWithWhereNestedInput!]
}

input ProjectNoteUpdateManyWithWhereNestedInput {
  where: ProjectNoteScalarWhereInput!
  data: ProjectNoteUpdateManyDataInput!
}

input ProjectNoteUpdateWithoutProjectDataInput {
  topic: String
  note: String
  createdBy: PersonUpdateOneInput
}

input ProjectNoteUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectNoteWhereUniqueInput!
  data: ProjectNoteUpdateWithoutProjectDataInput!
}

input ProjectNoteUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectNoteWhereUniqueInput!
  update: ProjectNoteUpdateWithoutProjectDataInput!
  create: ProjectNoteCreateWithoutProjectInput!
}

input ProjectNoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  project: ProjectWhereInput
  topic: String
  topic_not: String
  topic_in: [String!]
  topic_not_in: [String!]
  topic_lt: String
  topic_lte: String
  topic_gt: String
  topic_gte: String
  topic_contains: String
  topic_not_contains: String
  topic_starts_with: String
  topic_not_starts_with: String
  topic_ends_with: String
  topic_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdBy: PersonWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectNoteWhereInput!]
  OR: [ProjectNoteWhereInput!]
  NOT: [ProjectNoteWhereInput!]
}

input ProjectNoteWhereUniqueInput {
  id: ID
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  start: DateTime
  end: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type ProjectRole {
  id: ID!
  person: Person
  project: Project
  role: Role
  createdAt: DateTime
  updatedAt: DateTime
}

type ProjectRoleConnection {
  pageInfo: PageInfo!
  edges: [ProjectRoleEdge]!
  aggregate: AggregateProjectRole!
}

input ProjectRoleCreateInput {
  id: ID
  person: PersonCreateOneInput
  project: ProjectCreateOneWithoutProjectRolesInput
  role: RoleCreateOneInput
}

input ProjectRoleCreateManyWithoutProjectInput {
  create: [ProjectRoleCreateWithoutProjectInput!]
  connect: [ProjectRoleWhereUniqueInput!]
}

input ProjectRoleCreateWithoutProjectInput {
  id: ID
  person: PersonCreateOneInput
  role: RoleCreateOneInput
}

type ProjectRoleEdge {
  node: ProjectRole!
  cursor: String!
}

enum ProjectRoleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectRolePreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
}

input ProjectRoleScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectRoleScalarWhereInput!]
  OR: [ProjectRoleScalarWhereInput!]
  NOT: [ProjectRoleScalarWhereInput!]
}

type ProjectRoleSubscriptionPayload {
  mutation: MutationType!
  node: ProjectRole
  updatedFields: [String!]
  previousValues: ProjectRolePreviousValues
}

input ProjectRoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectRoleWhereInput
  AND: [ProjectRoleSubscriptionWhereInput!]
  OR: [ProjectRoleSubscriptionWhereInput!]
  NOT: [ProjectRoleSubscriptionWhereInput!]
}

input ProjectRoleUpdateInput {
  person: PersonUpdateOneInput
  project: ProjectUpdateOneWithoutProjectRolesInput
  role: RoleUpdateOneInput
}

input ProjectRoleUpdateManyWithoutProjectInput {
  create: [ProjectRoleCreateWithoutProjectInput!]
  delete: [ProjectRoleWhereUniqueInput!]
  connect: [ProjectRoleWhereUniqueInput!]
  set: [ProjectRoleWhereUniqueInput!]
  disconnect: [ProjectRoleWhereUniqueInput!]
  update: [ProjectRoleUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [ProjectRoleUpsertWithWhereUniqueWithoutProjectInput!]
  deleteMany: [ProjectRoleScalarWhereInput!]
}

input ProjectRoleUpdateWithoutProjectDataInput {
  person: PersonUpdateOneInput
  role: RoleUpdateOneInput
}

input ProjectRoleUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectRoleWhereUniqueInput!
  data: ProjectRoleUpdateWithoutProjectDataInput!
}

input ProjectRoleUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectRoleWhereUniqueInput!
  update: ProjectRoleUpdateWithoutProjectDataInput!
  create: ProjectRoleCreateWithoutProjectInput!
}

input ProjectRoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  person: PersonWhereInput
  project: ProjectWhereInput
  role: RoleWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectRoleWhereInput!]
  OR: [ProjectRoleWhereInput!]
  NOT: [ProjectRoleWhereInput!]
}

input ProjectRoleWhereUniqueInput {
  id: ID
}

input ProjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  start: DateTime
  start_not: DateTime
  start_in: [DateTime!]
  start_not_in: [DateTime!]
  start_lt: DateTime
  start_lte: DateTime
  start_gt: DateTime
  start_gte: DateTime
  end: DateTime
  end_not: DateTime
  end_in: [DateTime!]
  end_not_in: [DateTime!]
  end_lt: DateTime
  end_lte: DateTime
  end_gt: DateTime
  end_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  name: String
  product: ProductUpdateOneRequiredWithoutProjectsInput
  start: DateTime
  end: DateTime
  projectRoles: ProjectRoleUpdateManyWithoutProjectInput
  projectNotes: ProjectNoteUpdateManyWithoutProjectInput
}

input ProjectUpdateManyDataInput {
  name: String
  start: DateTime
  end: DateTime
}

input ProjectUpdateManyMutationInput {
  name: String
  start: DateTime
  end: DateTime
}

input ProjectUpdateManyWithoutProductInput {
  create: [ProjectCreateWithoutProductInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateOneRequiredWithoutProjectNotesInput {
  create: ProjectCreateWithoutProjectNotesInput
  update: ProjectUpdateWithoutProjectNotesDataInput
  upsert: ProjectUpsertWithoutProjectNotesInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateOneWithoutProjectRolesInput {
  create: ProjectCreateWithoutProjectRolesInput
  update: ProjectUpdateWithoutProjectRolesDataInput
  upsert: ProjectUpsertWithoutProjectRolesInput
  delete: Boolean
  disconnect: Boolean
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateWithoutProductDataInput {
  name: String
  start: DateTime
  end: DateTime
  projectRoles: ProjectRoleUpdateManyWithoutProjectInput
  projectNotes: ProjectNoteUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutProjectNotesDataInput {
  name: String
  product: ProductUpdateOneRequiredWithoutProjectsInput
  start: DateTime
  end: DateTime
  projectRoles: ProjectRoleUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutProjectRolesDataInput {
  name: String
  product: ProductUpdateOneRequiredWithoutProjectsInput
  start: DateTime
  end: DateTime
  projectNotes: ProjectNoteUpdateManyWithoutProjectInput
}

input ProjectUpdateWithWhereUniqueWithoutProductInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutProductDataInput!
}

input ProjectUpsertWithoutProjectNotesInput {
  update: ProjectUpdateWithoutProjectNotesDataInput!
  create: ProjectCreateWithoutProjectNotesInput!
}

input ProjectUpsertWithoutProjectRolesInput {
  update: ProjectUpdateWithoutProjectRolesDataInput!
  create: ProjectCreateWithoutProjectRolesInput!
}

input ProjectUpsertWithWhereUniqueWithoutProductInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutProductDataInput!
  create: ProjectCreateWithoutProductInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  product: ProductWhereInput
  start: DateTime
  start_not: DateTime
  start_in: [DateTime!]
  start_not_in: [DateTime!]
  start_lt: DateTime
  start_lte: DateTime
  start_gt: DateTime
  start_gte: DateTime
  end: DateTime
  end_not: DateTime
  end_in: [DateTime!]
  end_not_in: [DateTime!]
  end_lt: DateTime
  end_lte: DateTime
  end_gt: DateTime
  end_gte: DateTime
  projectRoles_every: ProjectRoleWhereInput
  projectRoles_some: ProjectRoleWhereInput
  projectRoles_none: ProjectRoleWhereInput
  projectNotes_every: ProjectNoteWhereInput
  projectNotes_some: ProjectNoteWhereInput
  projectNotes_none: ProjectNoteWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  lambdaRole(where: LambdaRoleWhereUniqueInput!): LambdaRole
  lambdaRoles(where: LambdaRoleWhereInput, orderBy: LambdaRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LambdaRole]!
  lambdaRolesConnection(where: LambdaRoleWhereInput, orderBy: LambdaRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LambdaRoleConnection!
  person(where: PersonWhereUniqueInput!): Person
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  productRole(where: ProductRoleWhereUniqueInput!): ProductRole
  productRoles(where: ProductRoleWhereInput, orderBy: ProductRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRole]!
  productRolesConnection(where: ProductRoleWhereInput, orderBy: ProductRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductRoleConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  projectNote(where: ProjectNoteWhereUniqueInput!): ProjectNote
  projectNotes(where: ProjectNoteWhereInput, orderBy: ProjectNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectNote]!
  projectNotesConnection(where: ProjectNoteWhereInput, orderBy: ProjectNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectNoteConnection!
  projectRole(where: ProjectRoleWhereUniqueInput!): ProjectRole
  projectRoles(where: ProjectRoleWhereInput, orderBy: ProjectRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRole]!
  projectRolesConnection(where: ProjectRoleWhereInput, orderBy: ProjectRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectRoleConnection!
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  node(id: ID!): Node
}

type Role {
  id: ID!
  name: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  id: ID
  name: String
  type: String
}

input RoleCreateOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type RoleEdge {
  node: Role!
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RolePreviousValues {
  id: ID!
  name: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
  AND: [RoleSubscriptionWhereInput!]
  OR: [RoleSubscriptionWhereInput!]
  NOT: [RoleSubscriptionWhereInput!]
}

input RoleUpdateDataInput {
  name: String
  type: String
}

input RoleUpdateInput {
  name: String
  type: String
}

input RoleUpdateManyMutationInput {
  name: String
  type: String
}

input RoleUpdateOneInput {
  create: RoleCreateInput
  update: RoleUpdateDataInput
  upsert: RoleUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: RoleWhereUniqueInput
}

input RoleUpdateOneRequiredInput {
  create: RoleCreateInput
  update: RoleUpdateDataInput
  upsert: RoleUpsertNestedInput
  connect: RoleWhereUniqueInput
}

input RoleUpsertNestedInput {
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
}

input RoleWhereUniqueInput {
  id: ID
}

type Subscription {
  lambdaRole(where: LambdaRoleSubscriptionWhereInput): LambdaRoleSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  productRole(where: ProductRoleSubscriptionWhereInput): ProductRoleSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  projectNote(where: ProjectNoteSubscriptionWhereInput): ProjectNoteSubscriptionPayload
  projectRole(where: ProjectRoleSubscriptionWhereInput): ProjectRoleSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
}
`