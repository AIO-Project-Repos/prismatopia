type AggregateLambdaRole {
  count: Int!
}

type AggregatePeopleGroup {
  count: Int!
}

type AggregatePeopleGroupMember {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductRole {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateProjectGroup {
  count: Int!
}

type AggregateProjectGroupMember {
  count: Int!
}

type AggregateProjectRole {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type LambdaRole {
  id: ID!
  person: Person
  role: Role
}

type LambdaRoleConnection {
  pageInfo: PageInfo!
  edges: [LambdaRoleEdge]!
  aggregate: AggregateLambdaRole!
}

input LambdaRoleCreateInput {
  id: ID
  person: PersonCreateOneInput
  role: RoleCreateOneInput
}

type LambdaRoleEdge {
  node: LambdaRole!
  cursor: String!
}

enum LambdaRoleOrderByInput {
  id_ASC
  id_DESC
}

type LambdaRolePreviousValues {
  id: ID!
}

type LambdaRoleSubscriptionPayload {
  mutation: MutationType!
  node: LambdaRole
  updatedFields: [String!]
  previousValues: LambdaRolePreviousValues
}

input LambdaRoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LambdaRoleWhereInput
  AND: [LambdaRoleSubscriptionWhereInput!]
  OR: [LambdaRoleSubscriptionWhereInput!]
  NOT: [LambdaRoleSubscriptionWhereInput!]
}

input LambdaRoleUpdateInput {
  person: PersonUpdateOneInput
  role: RoleUpdateOneInput
}

input LambdaRoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  person: PersonWhereInput
  role: RoleWhereInput
  AND: [LambdaRoleWhereInput!]
  OR: [LambdaRoleWhereInput!]
  NOT: [LambdaRoleWhereInput!]
}

input LambdaRoleWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLambdaRole(data: LambdaRoleCreateInput!): LambdaRole!
  updateLambdaRole(data: LambdaRoleUpdateInput!, where: LambdaRoleWhereUniqueInput!): LambdaRole
  upsertLambdaRole(where: LambdaRoleWhereUniqueInput!, create: LambdaRoleCreateInput!, update: LambdaRoleUpdateInput!): LambdaRole!
  deleteLambdaRole(where: LambdaRoleWhereUniqueInput!): LambdaRole
  deleteManyLambdaRoles(where: LambdaRoleWhereInput): BatchPayload!
  createPeopleGroup(data: PeopleGroupCreateInput!): PeopleGroup!
  updatePeopleGroup(data: PeopleGroupUpdateInput!, where: PeopleGroupWhereUniqueInput!): PeopleGroup
  updateManyPeopleGroups(data: PeopleGroupUpdateManyMutationInput!, where: PeopleGroupWhereInput): BatchPayload!
  upsertPeopleGroup(where: PeopleGroupWhereUniqueInput!, create: PeopleGroupCreateInput!, update: PeopleGroupUpdateInput!): PeopleGroup!
  deletePeopleGroup(where: PeopleGroupWhereUniqueInput!): PeopleGroup
  deleteManyPeopleGroups(where: PeopleGroupWhereInput): BatchPayload!
  createPeopleGroupMember(data: PeopleGroupMemberCreateInput!): PeopleGroupMember!
  updatePeopleGroupMember(data: PeopleGroupMemberUpdateInput!, where: PeopleGroupMemberWhereUniqueInput!): PeopleGroupMember
  upsertPeopleGroupMember(where: PeopleGroupMemberWhereUniqueInput!, create: PeopleGroupMemberCreateInput!, update: PeopleGroupMemberUpdateInput!): PeopleGroupMember!
  deletePeopleGroupMember(where: PeopleGroupMemberWhereUniqueInput!): PeopleGroupMember
  deleteManyPeopleGroupMembers(where: PeopleGroupMemberWhereInput): BatchPayload!
  createPerson(data: PersonCreateInput!): Person!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateManyPersons(data: PersonUpdateManyMutationInput!, where: PersonWhereInput): BatchPayload!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createProductRole(data: ProductRoleCreateInput!): ProductRole!
  updateProductRole(data: ProductRoleUpdateInput!, where: ProductRoleWhereUniqueInput!): ProductRole
  upsertProductRole(where: ProductRoleWhereUniqueInput!, create: ProductRoleCreateInput!, update: ProductRoleUpdateInput!): ProductRole!
  deleteProductRole(where: ProductRoleWhereUniqueInput!): ProductRole
  deleteManyProductRoles(where: ProductRoleWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createProjectGroup(data: ProjectGroupCreateInput!): ProjectGroup!
  updateProjectGroup(data: ProjectGroupUpdateInput!, where: ProjectGroupWhereUniqueInput!): ProjectGroup
  updateManyProjectGroups(data: ProjectGroupUpdateManyMutationInput!, where: ProjectGroupWhereInput): BatchPayload!
  upsertProjectGroup(where: ProjectGroupWhereUniqueInput!, create: ProjectGroupCreateInput!, update: ProjectGroupUpdateInput!): ProjectGroup!
  deleteProjectGroup(where: ProjectGroupWhereUniqueInput!): ProjectGroup
  deleteManyProjectGroups(where: ProjectGroupWhereInput): BatchPayload!
  createProjectGroupMember(data: ProjectGroupMemberCreateInput!): ProjectGroupMember!
  updateProjectGroupMember(data: ProjectGroupMemberUpdateInput!, where: ProjectGroupMemberWhereUniqueInput!): ProjectGroupMember
  upsertProjectGroupMember(where: ProjectGroupMemberWhereUniqueInput!, create: ProjectGroupMemberCreateInput!, update: ProjectGroupMemberUpdateInput!): ProjectGroupMember!
  deleteProjectGroupMember(where: ProjectGroupMemberWhereUniqueInput!): ProjectGroupMember
  deleteManyProjectGroupMembers(where: ProjectGroupMemberWhereInput): BatchPayload!
  createProjectRole(data: ProjectRoleCreateInput!): ProjectRole!
  updateProjectRole(data: ProjectRoleUpdateInput!, where: ProjectRoleWhereUniqueInput!): ProjectRole
  upsertProjectRole(where: ProjectRoleWhereUniqueInput!, create: ProjectRoleCreateInput!, update: ProjectRoleUpdateInput!): ProjectRole!
  deleteProjectRole(where: ProjectRoleWhereUniqueInput!): ProjectRole
  deleteManyProjectRoles(where: ProjectRoleWhereInput): BatchPayload!
  createRole(data: RoleCreateInput!): Role!
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PeopleGroup {
  id: ID!
  name: String
}

type PeopleGroupConnection {
  pageInfo: PageInfo!
  edges: [PeopleGroupEdge]!
  aggregate: AggregatePeopleGroup!
}

input PeopleGroupCreateInput {
  id: ID
  name: String
}

input PeopleGroupCreateOneInput {
  create: PeopleGroupCreateInput
  connect: PeopleGroupWhereUniqueInput
}

type PeopleGroupEdge {
  node: PeopleGroup!
  cursor: String!
}

type PeopleGroupMember {
  id: Int!
  peopleGroup: PeopleGroup
  person: Person
}

type PeopleGroupMemberConnection {
  pageInfo: PageInfo!
  edges: [PeopleGroupMemberEdge]!
  aggregate: AggregatePeopleGroupMember!
}

input PeopleGroupMemberCreateInput {
  peopleGroup: PeopleGroupCreateOneInput
  person: PersonCreateOneInput
}

type PeopleGroupMemberEdge {
  node: PeopleGroupMember!
  cursor: String!
}

enum PeopleGroupMemberOrderByInput {
  id_ASC
  id_DESC
}

type PeopleGroupMemberPreviousValues {
  id: Int!
}

type PeopleGroupMemberSubscriptionPayload {
  mutation: MutationType!
  node: PeopleGroupMember
  updatedFields: [String!]
  previousValues: PeopleGroupMemberPreviousValues
}

input PeopleGroupMemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PeopleGroupMemberWhereInput
  AND: [PeopleGroupMemberSubscriptionWhereInput!]
  OR: [PeopleGroupMemberSubscriptionWhereInput!]
  NOT: [PeopleGroupMemberSubscriptionWhereInput!]
}

input PeopleGroupMemberUpdateInput {
  peopleGroup: PeopleGroupUpdateOneInput
  person: PersonUpdateOneInput
}

input PeopleGroupMemberWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  peopleGroup: PeopleGroupWhereInput
  person: PersonWhereInput
  AND: [PeopleGroupMemberWhereInput!]
  OR: [PeopleGroupMemberWhereInput!]
  NOT: [PeopleGroupMemberWhereInput!]
}

input PeopleGroupMemberWhereUniqueInput {
  id: Int
}

enum PeopleGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type PeopleGroupPreviousValues {
  id: ID!
  name: String
}

type PeopleGroupSubscriptionPayload {
  mutation: MutationType!
  node: PeopleGroup
  updatedFields: [String!]
  previousValues: PeopleGroupPreviousValues
}

input PeopleGroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PeopleGroupWhereInput
  AND: [PeopleGroupSubscriptionWhereInput!]
  OR: [PeopleGroupSubscriptionWhereInput!]
  NOT: [PeopleGroupSubscriptionWhereInput!]
}

input PeopleGroupUpdateDataInput {
  name: String
}

input PeopleGroupUpdateInput {
  name: String
}

input PeopleGroupUpdateManyMutationInput {
  name: String
}

input PeopleGroupUpdateOneInput {
  create: PeopleGroupCreateInput
  update: PeopleGroupUpdateDataInput
  upsert: PeopleGroupUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PeopleGroupWhereUniqueInput
}

input PeopleGroupUpsertNestedInput {
  update: PeopleGroupUpdateDataInput!
  create: PeopleGroupCreateInput!
}

input PeopleGroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [PeopleGroupWhereInput!]
  OR: [PeopleGroupWhereInput!]
  NOT: [PeopleGroupWhereInput!]
}

input PeopleGroupWhereUniqueInput {
  id: ID
}

type Person {
  id: ID!
  email: String
  firstname: String
  githubId: String
  lastname: String
  program: String
  slackId: String
  timezone: String
}

type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  id: ID
  email: String
  firstname: String
  githubId: String
  lastname: String
  program: String
  slackId: String
  timezone: String
}

input PersonCreateOneInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

type PersonEdge {
  node: Person!
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  firstname_ASC
  firstname_DESC
  githubId_ASC
  githubId_DESC
  lastname_ASC
  lastname_DESC
  program_ASC
  program_DESC
  slackId_ASC
  slackId_DESC
  timezone_ASC
  timezone_DESC
}

type PersonPreviousValues {
  id: ID!
  email: String
  firstname: String
  githubId: String
  lastname: String
  program: String
  slackId: String
  timezone: String
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
  AND: [PersonSubscriptionWhereInput!]
  OR: [PersonSubscriptionWhereInput!]
  NOT: [PersonSubscriptionWhereInput!]
}

input PersonUpdateDataInput {
  email: String
  firstname: String
  githubId: String
  lastname: String
  program: String
  slackId: String
  timezone: String
}

input PersonUpdateInput {
  email: String
  firstname: String
  githubId: String
  lastname: String
  program: String
  slackId: String
  timezone: String
}

input PersonUpdateManyMutationInput {
  email: String
  firstname: String
  githubId: String
  lastname: String
  program: String
  slackId: String
  timezone: String
}

input PersonUpdateOneInput {
  create: PersonCreateInput
  update: PersonUpdateDataInput
  upsert: PersonUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PersonWhereUniqueInput
}

input PersonUpsertNestedInput {
  update: PersonUpdateDataInput!
  create: PersonCreateInput!
}

input PersonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  githubId: String
  githubId_not: String
  githubId_in: [String!]
  githubId_not_in: [String!]
  githubId_lt: String
  githubId_lte: String
  githubId_gt: String
  githubId_gte: String
  githubId_contains: String
  githubId_not_contains: String
  githubId_starts_with: String
  githubId_not_starts_with: String
  githubId_ends_with: String
  githubId_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  program: String
  program_not: String
  program_in: [String!]
  program_not_in: [String!]
  program_lt: String
  program_lte: String
  program_gt: String
  program_gte: String
  program_contains: String
  program_not_contains: String
  program_starts_with: String
  program_not_starts_with: String
  program_ends_with: String
  program_not_ends_with: String
  slackId: String
  slackId_not: String
  slackId_in: [String!]
  slackId_not_in: [String!]
  slackId_lt: String
  slackId_lte: String
  slackId_gt: String
  slackId_gte: String
  slackId_contains: String
  slackId_not_contains: String
  slackId_starts_with: String
  slackId_not_starts_with: String
  slackId_ends_with: String
  slackId_not_ends_with: String
  timezone: String
  timezone_not: String
  timezone_in: [String!]
  timezone_not_in: [String!]
  timezone_lt: String
  timezone_lte: String
  timezone_gt: String
  timezone_gte: String
  timezone_contains: String
  timezone_not_contains: String
  timezone_starts_with: String
  timezone_not_starts_with: String
  timezone_ends_with: String
  timezone_not_ends_with: String
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
}

input PersonWhereUniqueInput {
  id: ID
}

type Product {
  id: ID!
  productName: String
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  productName: String
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  productName_ASC
  productName_DESC
}

type ProductPreviousValues {
  id: ID!
  productName: String
}

type ProductRole {
  id: ID!
  person: Person
  product: Product
  role: Role
}

type ProductRoleConnection {
  pageInfo: PageInfo!
  edges: [ProductRoleEdge]!
  aggregate: AggregateProductRole!
}

input ProductRoleCreateInput {
  id: ID
  person: PersonCreateOneInput
  product: ProductCreateOneInput
  role: RoleCreateOneInput
}

type ProductRoleEdge {
  node: ProductRole!
  cursor: String!
}

enum ProductRoleOrderByInput {
  id_ASC
  id_DESC
}

type ProductRolePreviousValues {
  id: ID!
}

type ProductRoleSubscriptionPayload {
  mutation: MutationType!
  node: ProductRole
  updatedFields: [String!]
  previousValues: ProductRolePreviousValues
}

input ProductRoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductRoleWhereInput
  AND: [ProductRoleSubscriptionWhereInput!]
  OR: [ProductRoleSubscriptionWhereInput!]
  NOT: [ProductRoleSubscriptionWhereInput!]
}

input ProductRoleUpdateInput {
  person: PersonUpdateOneInput
  product: ProductUpdateOneInput
  role: RoleUpdateOneInput
}

input ProductRoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  person: PersonWhereInput
  product: ProductWhereInput
  role: RoleWhereInput
  AND: [ProductRoleWhereInput!]
  OR: [ProductRoleWhereInput!]
  NOT: [ProductRoleWhereInput!]
}

input ProductRoleWhereUniqueInput {
  id: ID
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateDataInput {
  productName: String
}

input ProductUpdateInput {
  productName: String
}

input ProductUpdateManyMutationInput {
  productName: String
}

input ProductUpdateOneInput {
  create: ProductCreateInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductWhereUniqueInput
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  productName: String
  productName_not: String
  productName_in: [String!]
  productName_not_in: [String!]
  productName_lt: String
  productName_lte: String
  productName_gt: String
  productName_gte: String
  productName_contains: String
  productName_not_contains: String
  productName_starts_with: String
  productName_not_starts_with: String
  productName_ends_with: String
  productName_not_ends_with: String
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Project {
  id: ID!
  end: DateTime
  name: String
  product: Product
  start: DateTime
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  end: DateTime
  name: String
  product: ProductCreateOneInput
  start: DateTime
}

input ProjectCreateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

type ProjectGroup {
  id: ID!
  name: String
}

type ProjectGroupConnection {
  pageInfo: PageInfo!
  edges: [ProjectGroupEdge]!
  aggregate: AggregateProjectGroup!
}

input ProjectGroupCreateInput {
  id: ID
  name: String
}

input ProjectGroupCreateOneInput {
  create: ProjectGroupCreateInput
  connect: ProjectGroupWhereUniqueInput
}

type ProjectGroupEdge {
  node: ProjectGroup!
  cursor: String!
}

type ProjectGroupMember {
  id: ID!
  project: Project
  projectGroup: ProjectGroup
}

type ProjectGroupMemberConnection {
  pageInfo: PageInfo!
  edges: [ProjectGroupMemberEdge]!
  aggregate: AggregateProjectGroupMember!
}

input ProjectGroupMemberCreateInput {
  id: ID
  project: ProjectCreateOneInput
  projectGroup: ProjectGroupCreateOneInput
}

type ProjectGroupMemberEdge {
  node: ProjectGroupMember!
  cursor: String!
}

enum ProjectGroupMemberOrderByInput {
  id_ASC
  id_DESC
}

type ProjectGroupMemberPreviousValues {
  id: ID!
}

type ProjectGroupMemberSubscriptionPayload {
  mutation: MutationType!
  node: ProjectGroupMember
  updatedFields: [String!]
  previousValues: ProjectGroupMemberPreviousValues
}

input ProjectGroupMemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectGroupMemberWhereInput
  AND: [ProjectGroupMemberSubscriptionWhereInput!]
  OR: [ProjectGroupMemberSubscriptionWhereInput!]
  NOT: [ProjectGroupMemberSubscriptionWhereInput!]
}

input ProjectGroupMemberUpdateInput {
  project: ProjectUpdateOneInput
  projectGroup: ProjectGroupUpdateOneInput
}

input ProjectGroupMemberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  project: ProjectWhereInput
  projectGroup: ProjectGroupWhereInput
  AND: [ProjectGroupMemberWhereInput!]
  OR: [ProjectGroupMemberWhereInput!]
  NOT: [ProjectGroupMemberWhereInput!]
}

input ProjectGroupMemberWhereUniqueInput {
  id: ID
}

enum ProjectGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ProjectGroupPreviousValues {
  id: ID!
  name: String
}

type ProjectGroupSubscriptionPayload {
  mutation: MutationType!
  node: ProjectGroup
  updatedFields: [String!]
  previousValues: ProjectGroupPreviousValues
}

input ProjectGroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectGroupWhereInput
  AND: [ProjectGroupSubscriptionWhereInput!]
  OR: [ProjectGroupSubscriptionWhereInput!]
  NOT: [ProjectGroupSubscriptionWhereInput!]
}

input ProjectGroupUpdateDataInput {
  name: String
}

input ProjectGroupUpdateInput {
  name: String
}

input ProjectGroupUpdateManyMutationInput {
  name: String
}

input ProjectGroupUpdateOneInput {
  create: ProjectGroupCreateInput
  update: ProjectGroupUpdateDataInput
  upsert: ProjectGroupUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ProjectGroupWhereUniqueInput
}

input ProjectGroupUpsertNestedInput {
  update: ProjectGroupUpdateDataInput!
  create: ProjectGroupCreateInput!
}

input ProjectGroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ProjectGroupWhereInput!]
  OR: [ProjectGroupWhereInput!]
  NOT: [ProjectGroupWhereInput!]
}

input ProjectGroupWhereUniqueInput {
  id: ID
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  end_ASC
  end_DESC
  name_ASC
  name_DESC
  start_ASC
  start_DESC
}

type ProjectPreviousValues {
  id: ID!
  end: DateTime
  name: String
  start: DateTime
}

type ProjectRole {
  id: ID!
  person: Person
  project: Project
  role: Role
}

type ProjectRoleConnection {
  pageInfo: PageInfo!
  edges: [ProjectRoleEdge]!
  aggregate: AggregateProjectRole!
}

input ProjectRoleCreateInput {
  id: ID
  person: PersonCreateOneInput
  project: ProjectCreateOneInput
  role: RoleCreateOneInput
}

type ProjectRoleEdge {
  node: ProjectRole!
  cursor: String!
}

enum ProjectRoleOrderByInput {
  id_ASC
  id_DESC
}

type ProjectRolePreviousValues {
  id: ID!
}

type ProjectRoleSubscriptionPayload {
  mutation: MutationType!
  node: ProjectRole
  updatedFields: [String!]
  previousValues: ProjectRolePreviousValues
}

input ProjectRoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectRoleWhereInput
  AND: [ProjectRoleSubscriptionWhereInput!]
  OR: [ProjectRoleSubscriptionWhereInput!]
  NOT: [ProjectRoleSubscriptionWhereInput!]
}

input ProjectRoleUpdateInput {
  person: PersonUpdateOneInput
  project: ProjectUpdateOneInput
  role: RoleUpdateOneInput
}

input ProjectRoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  person: PersonWhereInput
  project: ProjectWhereInput
  role: RoleWhereInput
  AND: [ProjectRoleWhereInput!]
  OR: [ProjectRoleWhereInput!]
  NOT: [ProjectRoleWhereInput!]
}

input ProjectRoleWhereUniqueInput {
  id: ID
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateDataInput {
  end: DateTime
  name: String
  product: ProductUpdateOneInput
  start: DateTime
}

input ProjectUpdateInput {
  end: DateTime
  name: String
  product: ProductUpdateOneInput
  start: DateTime
}

input ProjectUpdateManyMutationInput {
  end: DateTime
  name: String
  start: DateTime
}

input ProjectUpdateOneInput {
  create: ProjectCreateInput
  update: ProjectUpdateDataInput
  upsert: ProjectUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ProjectWhereUniqueInput
}

input ProjectUpsertNestedInput {
  update: ProjectUpdateDataInput!
  create: ProjectCreateInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  end: DateTime
  end_not: DateTime
  end_in: [DateTime!]
  end_not_in: [DateTime!]
  end_lt: DateTime
  end_lte: DateTime
  end_gt: DateTime
  end_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  product: ProductWhereInput
  start: DateTime
  start_not: DateTime
  start_in: [DateTime!]
  start_not_in: [DateTime!]
  start_lt: DateTime
  start_lte: DateTime
  start_gt: DateTime
  start_gte: DateTime
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  lambdaRole(where: LambdaRoleWhereUniqueInput!): LambdaRole
  lambdaRoles(where: LambdaRoleWhereInput, orderBy: LambdaRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LambdaRole]!
  lambdaRolesConnection(where: LambdaRoleWhereInput, orderBy: LambdaRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LambdaRoleConnection!
  peopleGroup(where: PeopleGroupWhereUniqueInput!): PeopleGroup
  peopleGroups(where: PeopleGroupWhereInput, orderBy: PeopleGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PeopleGroup]!
  peopleGroupsConnection(where: PeopleGroupWhereInput, orderBy: PeopleGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PeopleGroupConnection!
  peopleGroupMember(where: PeopleGroupMemberWhereUniqueInput!): PeopleGroupMember
  peopleGroupMembers(where: PeopleGroupMemberWhereInput, orderBy: PeopleGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PeopleGroupMember]!
  peopleGroupMembersConnection(where: PeopleGroupMemberWhereInput, orderBy: PeopleGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PeopleGroupMemberConnection!
  person(where: PersonWhereUniqueInput!): Person
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  productRole(where: ProductRoleWhereUniqueInput!): ProductRole
  productRoles(where: ProductRoleWhereInput, orderBy: ProductRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRole]!
  productRolesConnection(where: ProductRoleWhereInput, orderBy: ProductRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductRoleConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  projectGroup(where: ProjectGroupWhereUniqueInput!): ProjectGroup
  projectGroups(where: ProjectGroupWhereInput, orderBy: ProjectGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectGroup]!
  projectGroupsConnection(where: ProjectGroupWhereInput, orderBy: ProjectGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectGroupConnection!
  projectGroupMember(where: ProjectGroupMemberWhereUniqueInput!): ProjectGroupMember
  projectGroupMembers(where: ProjectGroupMemberWhereInput, orderBy: ProjectGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectGroupMember]!
  projectGroupMembersConnection(where: ProjectGroupMemberWhereInput, orderBy: ProjectGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectGroupMemberConnection!
  projectRole(where: ProjectRoleWhereUniqueInput!): ProjectRole
  projectRoles(where: ProjectRoleWhereInput, orderBy: ProjectRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRole]!
  projectRolesConnection(where: ProjectRoleWhereInput, orderBy: ProjectRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectRoleConnection!
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  node(id: ID!): Node
}

type Role {
  id: ID!
  roleName: String
  type: String
}

type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  id: ID
  roleName: String
  type: String
}

input RoleCreateOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type RoleEdge {
  node: Role!
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  roleName_ASC
  roleName_DESC
  type_ASC
  type_DESC
}

type RolePreviousValues {
  id: ID!
  roleName: String
  type: String
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
  AND: [RoleSubscriptionWhereInput!]
  OR: [RoleSubscriptionWhereInput!]
  NOT: [RoleSubscriptionWhereInput!]
}

input RoleUpdateDataInput {
  roleName: String
  type: String
}

input RoleUpdateInput {
  roleName: String
  type: String
}

input RoleUpdateManyMutationInput {
  roleName: String
  type: String
}

input RoleUpdateOneInput {
  create: RoleCreateInput
  update: RoleUpdateDataInput
  upsert: RoleUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: RoleWhereUniqueInput
}

input RoleUpsertNestedInput {
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  roleName: String
  roleName_not: String
  roleName_in: [String!]
  roleName_not_in: [String!]
  roleName_lt: String
  roleName_lte: String
  roleName_gt: String
  roleName_gte: String
  roleName_contains: String
  roleName_not_contains: String
  roleName_starts_with: String
  roleName_not_starts_with: String
  roleName_ends_with: String
  roleName_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
}

input RoleWhereUniqueInput {
  id: ID
}

type Subscription {
  lambdaRole(where: LambdaRoleSubscriptionWhereInput): LambdaRoleSubscriptionPayload
  peopleGroup(where: PeopleGroupSubscriptionWhereInput): PeopleGroupSubscriptionPayload
  peopleGroupMember(where: PeopleGroupMemberSubscriptionWhereInput): PeopleGroupMemberSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  productRole(where: ProductRoleSubscriptionWhereInput): ProductRoleSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  projectGroup(where: ProjectGroupSubscriptionWhereInput): ProjectGroupSubscriptionPayload
  projectGroupMember(where: ProjectGroupMemberSubscriptionWhereInput): ProjectGroupMemberSubscriptionPayload
  projectRole(where: ProjectRoleSubscriptionWhereInput): ProjectRoleSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
}
