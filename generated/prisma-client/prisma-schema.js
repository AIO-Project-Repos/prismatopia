module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateGroup {
  count: Int!
}

type AggregateLambdaRole {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductRole {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateProjectRole {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Group {
  id: Int!
  groupName: String
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  groupName: String
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  groupName_ASC
  groupName_DESC
}

type GroupPreviousValues {
  id: Int!
  groupName: String
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateInput {
  groupName: String
}

input GroupUpdateManyMutationInput {
  groupName: String
}

input GroupWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  groupName: String
  groupName_not: String
  groupName_in: [String!]
  groupName_not_in: [String!]
  groupName_lt: String
  groupName_lte: String
  groupName_gt: String
  groupName_gte: String
  groupName_contains: String
  groupName_not_contains: String
  groupName_starts_with: String
  groupName_not_starts_with: String
  groupName_ends_with: String
  groupName_not_ends_with: String
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: Int
}

type LambdaRole {
  id: Int!
  person: Person!
  role: Role!
}

type LambdaRoleConnection {
  pageInfo: PageInfo!
  edges: [LambdaRoleEdge]!
  aggregate: AggregateLambdaRole!
}

input LambdaRoleCreateInput {
  person: PersonCreateOneInput!
  role: RoleCreateOneInput!
}

type LambdaRoleEdge {
  node: LambdaRole!
  cursor: String!
}

enum LambdaRoleOrderByInput {
  id_ASC
  id_DESC
}

type LambdaRolePreviousValues {
  id: Int!
}

type LambdaRoleSubscriptionPayload {
  mutation: MutationType!
  node: LambdaRole
  updatedFields: [String!]
  previousValues: LambdaRolePreviousValues
}

input LambdaRoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LambdaRoleWhereInput
  AND: [LambdaRoleSubscriptionWhereInput!]
  OR: [LambdaRoleSubscriptionWhereInput!]
  NOT: [LambdaRoleSubscriptionWhereInput!]
}

input LambdaRoleUpdateInput {
  person: PersonUpdateOneRequiredInput
  role: RoleUpdateOneRequiredInput
}

input LambdaRoleWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  person: PersonWhereInput
  role: RoleWhereInput
  AND: [LambdaRoleWhereInput!]
  OR: [LambdaRoleWhereInput!]
  NOT: [LambdaRoleWhereInput!]
}

input LambdaRoleWhereUniqueInput {
  id: Int
}

scalar Long

type Mutation {
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createLambdaRole(data: LambdaRoleCreateInput!): LambdaRole!
  updateLambdaRole(data: LambdaRoleUpdateInput!, where: LambdaRoleWhereUniqueInput!): LambdaRole
  upsertLambdaRole(where: LambdaRoleWhereUniqueInput!, create: LambdaRoleCreateInput!, update: LambdaRoleUpdateInput!): LambdaRole!
  deleteLambdaRole(where: LambdaRoleWhereUniqueInput!): LambdaRole
  deleteManyLambdaRoles(where: LambdaRoleWhereInput): BatchPayload!
  createPerson(data: PersonCreateInput!): Person!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateManyPersons(data: PersonUpdateManyMutationInput!, where: PersonWhereInput): BatchPayload!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createProductRole(data: ProductRoleCreateInput!): ProductRole!
  updateProductRole(data: ProductRoleUpdateInput!, where: ProductRoleWhereUniqueInput!): ProductRole
  upsertProductRole(where: ProductRoleWhereUniqueInput!, create: ProductRoleCreateInput!, update: ProductRoleUpdateInput!): ProductRole!
  deleteProductRole(where: ProductRoleWhereUniqueInput!): ProductRole
  deleteManyProductRoles(where: ProductRoleWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createProjectRole(data: ProjectRoleCreateInput!): ProjectRole!
  updateProjectRole(data: ProjectRoleUpdateInput!, where: ProjectRoleWhereUniqueInput!): ProjectRole
  upsertProjectRole(where: ProjectRoleWhereUniqueInput!, create: ProjectRoleCreateInput!, update: ProjectRoleUpdateInput!): ProjectRole!
  deleteProjectRole(where: ProjectRoleWhereUniqueInput!): ProjectRole
  deleteManyProjectRoles(where: ProjectRoleWhereInput): BatchPayload!
  createRole(data: RoleCreateInput!): Role!
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Person {
  id: Int!
  email: String
  firstname: String
  githubId: String
  lastname: String
  slackId: String
}

type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  email: String
  firstname: String
  githubId: String
  lastname: String
  slackId: String
}

input PersonCreateOneInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

type PersonEdge {
  node: Person!
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  firstname_ASC
  firstname_DESC
  githubId_ASC
  githubId_DESC
  lastname_ASC
  lastname_DESC
  slackId_ASC
  slackId_DESC
}

type PersonPreviousValues {
  id: Int!
  email: String
  firstname: String
  githubId: String
  lastname: String
  slackId: String
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
  AND: [PersonSubscriptionWhereInput!]
  OR: [PersonSubscriptionWhereInput!]
  NOT: [PersonSubscriptionWhereInput!]
}

input PersonUpdateDataInput {
  email: String
  firstname: String
  githubId: String
  lastname: String
  slackId: String
}

input PersonUpdateInput {
  email: String
  firstname: String
  githubId: String
  lastname: String
  slackId: String
}

input PersonUpdateManyMutationInput {
  email: String
  firstname: String
  githubId: String
  lastname: String
  slackId: String
}

input PersonUpdateOneRequiredInput {
  create: PersonCreateInput
  update: PersonUpdateDataInput
  upsert: PersonUpsertNestedInput
  connect: PersonWhereUniqueInput
}

input PersonUpsertNestedInput {
  update: PersonUpdateDataInput!
  create: PersonCreateInput!
}

input PersonWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  githubId: String
  githubId_not: String
  githubId_in: [String!]
  githubId_not_in: [String!]
  githubId_lt: String
  githubId_lte: String
  githubId_gt: String
  githubId_gte: String
  githubId_contains: String
  githubId_not_contains: String
  githubId_starts_with: String
  githubId_not_starts_with: String
  githubId_ends_with: String
  githubId_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  slackId: String
  slackId_not: String
  slackId_in: [String!]
  slackId_not_in: [String!]
  slackId_lt: String
  slackId_lte: String
  slackId_gt: String
  slackId_gte: String
  slackId_contains: String
  slackId_not_contains: String
  slackId_starts_with: String
  slackId_not_starts_with: String
  slackId_ends_with: String
  slackId_not_ends_with: String
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
}

input PersonWhereUniqueInput {
  id: Int
}

type Product {
  id: Int!
  productName: String
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  productName: String
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  productName_ASC
  productName_DESC
}

type ProductPreviousValues {
  id: Int!
  productName: String
}

type ProductRole {
  id: Int!
  person: Person!
  product: Product!
  role: Role!
}

type ProductRoleConnection {
  pageInfo: PageInfo!
  edges: [ProductRoleEdge]!
  aggregate: AggregateProductRole!
}

input ProductRoleCreateInput {
  person: PersonCreateOneInput!
  product: ProductCreateOneInput!
  role: RoleCreateOneInput!
}

type ProductRoleEdge {
  node: ProductRole!
  cursor: String!
}

enum ProductRoleOrderByInput {
  id_ASC
  id_DESC
}

type ProductRolePreviousValues {
  id: Int!
}

type ProductRoleSubscriptionPayload {
  mutation: MutationType!
  node: ProductRole
  updatedFields: [String!]
  previousValues: ProductRolePreviousValues
}

input ProductRoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductRoleWhereInput
  AND: [ProductRoleSubscriptionWhereInput!]
  OR: [ProductRoleSubscriptionWhereInput!]
  NOT: [ProductRoleSubscriptionWhereInput!]
}

input ProductRoleUpdateInput {
  person: PersonUpdateOneRequiredInput
  product: ProductUpdateOneRequiredInput
  role: RoleUpdateOneRequiredInput
}

input ProductRoleWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  person: PersonWhereInput
  product: ProductWhereInput
  role: RoleWhereInput
  AND: [ProductRoleWhereInput!]
  OR: [ProductRoleWhereInput!]
  NOT: [ProductRoleWhereInput!]
}

input ProductRoleWhereUniqueInput {
  id: Int
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateDataInput {
  productName: String
}

input ProductUpdateInput {
  productName: String
}

input ProductUpdateManyMutationInput {
  productName: String
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
  connect: ProductWhereUniqueInput
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  productName: String
  productName_not: String
  productName_in: [String!]
  productName_not_in: [String!]
  productName_lt: String
  productName_lte: String
  productName_gt: String
  productName_gte: String
  productName_contains: String
  productName_not_contains: String
  productName_starts_with: String
  productName_not_starts_with: String
  productName_ends_with: String
  productName_not_ends_with: String
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: Int
}

type Project {
  id: Int!
  name: String
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ProjectPreviousValues {
  id: Int!
  name: String
}

type ProjectRole {
  id: Int!
  person: Person!
  product: Product!
  role: Role!
}

type ProjectRoleConnection {
  pageInfo: PageInfo!
  edges: [ProjectRoleEdge]!
  aggregate: AggregateProjectRole!
}

input ProjectRoleCreateInput {
  person: PersonCreateOneInput!
  product: ProductCreateOneInput!
  role: RoleCreateOneInput!
}

type ProjectRoleEdge {
  node: ProjectRole!
  cursor: String!
}

enum ProjectRoleOrderByInput {
  id_ASC
  id_DESC
}

type ProjectRolePreviousValues {
  id: Int!
}

type ProjectRoleSubscriptionPayload {
  mutation: MutationType!
  node: ProjectRole
  updatedFields: [String!]
  previousValues: ProjectRolePreviousValues
}

input ProjectRoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectRoleWhereInput
  AND: [ProjectRoleSubscriptionWhereInput!]
  OR: [ProjectRoleSubscriptionWhereInput!]
  NOT: [ProjectRoleSubscriptionWhereInput!]
}

input ProjectRoleUpdateInput {
  person: PersonUpdateOneRequiredInput
  product: ProductUpdateOneRequiredInput
  role: RoleUpdateOneRequiredInput
}

input ProjectRoleWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  person: PersonWhereInput
  product: ProductWhereInput
  role: RoleWhereInput
  AND: [ProjectRoleWhereInput!]
  OR: [ProjectRoleWhereInput!]
  NOT: [ProjectRoleWhereInput!]
}

input ProjectRoleWhereUniqueInput {
  id: Int
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  name: String
}

input ProjectUpdateManyMutationInput {
  name: String
}

input ProjectWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: Int
}

type Query {
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  lambdaRole(where: LambdaRoleWhereUniqueInput!): LambdaRole
  lambdaRoles(where: LambdaRoleWhereInput, orderBy: LambdaRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LambdaRole]!
  lambdaRolesConnection(where: LambdaRoleWhereInput, orderBy: LambdaRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LambdaRoleConnection!
  person(where: PersonWhereUniqueInput!): Person
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  productRole(where: ProductRoleWhereUniqueInput!): ProductRole
  productRoles(where: ProductRoleWhereInput, orderBy: ProductRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRole]!
  productRolesConnection(where: ProductRoleWhereInput, orderBy: ProductRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductRoleConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  projectRole(where: ProjectRoleWhereUniqueInput!): ProjectRole
  projectRoles(where: ProjectRoleWhereInput, orderBy: ProjectRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRole]!
  projectRolesConnection(where: ProjectRoleWhereInput, orderBy: ProjectRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectRoleConnection!
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  node(id: ID!): Node
}

type Role {
  id: Int!
  roleName: String
}

type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  roleName: String
}

input RoleCreateOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type RoleEdge {
  node: Role!
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  roleName_ASC
  roleName_DESC
}

type RolePreviousValues {
  id: Int!
  roleName: String
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
  AND: [RoleSubscriptionWhereInput!]
  OR: [RoleSubscriptionWhereInput!]
  NOT: [RoleSubscriptionWhereInput!]
}

input RoleUpdateDataInput {
  roleName: String
}

input RoleUpdateInput {
  roleName: String
}

input RoleUpdateManyMutationInput {
  roleName: String
}

input RoleUpdateOneRequiredInput {
  create: RoleCreateInput
  update: RoleUpdateDataInput
  upsert: RoleUpsertNestedInput
  connect: RoleWhereUniqueInput
}

input RoleUpsertNestedInput {
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  roleName: String
  roleName_not: String
  roleName_in: [String!]
  roleName_not_in: [String!]
  roleName_lt: String
  roleName_lte: String
  roleName_gt: String
  roleName_gte: String
  roleName_contains: String
  roleName_not_contains: String
  roleName_starts_with: String
  roleName_not_starts_with: String
  roleName_ends_with: String
  roleName_not_ends_with: String
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
}

input RoleWhereUniqueInput {
  id: Int
}

type Subscription {
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  lambdaRole(where: LambdaRoleSubscriptionWhereInput): LambdaRoleSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  productRole(where: ProductRoleSubscriptionWhereInput): ProductRoleSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  projectRole(where: ProjectRoleSubscriptionWhereInput): ProjectRoleSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
}
`
      }
    