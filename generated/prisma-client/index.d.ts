// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  group: (where?: GroupWhereInput) => Promise<boolean>;
  lambdaRole: (where?: LambdaRoleWhereInput) => Promise<boolean>;
  person: (where?: PersonWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  productRole: (where?: ProductRoleWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  projectRole: (where?: ProjectRoleWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  lambdaRole: (where: LambdaRoleWhereUniqueInput) => LambdaRoleNullablePromise;
  lambdaRoles: (args?: {
    where?: LambdaRoleWhereInput;
    orderBy?: LambdaRoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<LambdaRole>;
  lambdaRolesConnection: (args?: {
    where?: LambdaRoleWhereInput;
    orderBy?: LambdaRoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LambdaRoleConnectionPromise;
  person: (where: PersonWhereUniqueInput) => PersonNullablePromise;
  persons: (args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Person>;
  personsConnection: (args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  productRole: (
    where: ProductRoleWhereUniqueInput
  ) => ProductRoleNullablePromise;
  productRoles: (args?: {
    where?: ProductRoleWhereInput;
    orderBy?: ProductRoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProductRole>;
  productRolesConnection: (args?: {
    where?: ProductRoleWhereInput;
    orderBy?: ProductRoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductRoleConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  projectRole: (
    where: ProjectRoleWhereUniqueInput
  ) => ProjectRoleNullablePromise;
  projectRoles: (args?: {
    where?: ProjectRoleWhereInput;
    orderBy?: ProjectRoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProjectRole>;
  projectRolesConnection: (args?: {
    where?: ProjectRoleWhereInput;
    orderBy?: ProjectRoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectRoleConnectionPromise;
  role: (where: RoleWhereUniqueInput) => RoleNullablePromise;
  roles: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Role>;
  rolesConnection: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createLambdaRole: (data: LambdaRoleCreateInput) => LambdaRolePromise;
  updateLambdaRole: (args: {
    data: LambdaRoleUpdateInput;
    where: LambdaRoleWhereUniqueInput;
  }) => LambdaRolePromise;
  upsertLambdaRole: (args: {
    where: LambdaRoleWhereUniqueInput;
    create: LambdaRoleCreateInput;
    update: LambdaRoleUpdateInput;
  }) => LambdaRolePromise;
  deleteLambdaRole: (where: LambdaRoleWhereUniqueInput) => LambdaRolePromise;
  deleteManyLambdaRoles: (where?: LambdaRoleWhereInput) => BatchPayloadPromise;
  createPerson: (data: PersonCreateInput) => PersonPromise;
  updatePerson: (args: {
    data: PersonUpdateInput;
    where: PersonWhereUniqueInput;
  }) => PersonPromise;
  updateManyPersons: (args: {
    data: PersonUpdateManyMutationInput;
    where?: PersonWhereInput;
  }) => BatchPayloadPromise;
  upsertPerson: (args: {
    where: PersonWhereUniqueInput;
    create: PersonCreateInput;
    update: PersonUpdateInput;
  }) => PersonPromise;
  deletePerson: (where: PersonWhereUniqueInput) => PersonPromise;
  deleteManyPersons: (where?: PersonWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createProductRole: (data: ProductRoleCreateInput) => ProductRolePromise;
  updateProductRole: (args: {
    data: ProductRoleUpdateInput;
    where: ProductRoleWhereUniqueInput;
  }) => ProductRolePromise;
  upsertProductRole: (args: {
    where: ProductRoleWhereUniqueInput;
    create: ProductRoleCreateInput;
    update: ProductRoleUpdateInput;
  }) => ProductRolePromise;
  deleteProductRole: (where: ProductRoleWhereUniqueInput) => ProductRolePromise;
  deleteManyProductRoles: (
    where?: ProductRoleWhereInput
  ) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createProjectRole: (data: ProjectRoleCreateInput) => ProjectRolePromise;
  updateProjectRole: (args: {
    data: ProjectRoleUpdateInput;
    where: ProjectRoleWhereUniqueInput;
  }) => ProjectRolePromise;
  upsertProjectRole: (args: {
    where: ProjectRoleWhereUniqueInput;
    create: ProjectRoleCreateInput;
    update: ProjectRoleUpdateInput;
  }) => ProjectRolePromise;
  deleteProjectRole: (where: ProjectRoleWhereUniqueInput) => ProjectRolePromise;
  deleteManyProjectRoles: (
    where?: ProjectRoleWhereInput
  ) => BatchPayloadPromise;
  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (args: {
    data: RoleUpdateInput;
    where: RoleWhereUniqueInput;
  }) => RolePromise;
  updateManyRoles: (args: {
    data: RoleUpdateManyMutationInput;
    where?: RoleWhereInput;
  }) => BatchPayloadPromise;
  upsertRole: (args: {
    where: RoleWhereUniqueInput;
    create: RoleCreateInput;
    update: RoleUpdateInput;
  }) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  lambdaRole: (
    where?: LambdaRoleSubscriptionWhereInput
  ) => LambdaRoleSubscriptionPayloadSubscription;
  person: (
    where?: PersonSubscriptionWhereInput
  ) => PersonSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  productRole: (
    where?: ProductRoleSubscriptionWhereInput
  ) => ProductRoleSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  projectRole: (
    where?: ProjectRoleSubscriptionWhereInput
  ) => ProjectRoleSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type LambdaRoleOrderByInput = "id_ASC" | "id_DESC";

export type PersonOrderByInput =
  | "labs_id_ASC"
  | "labs_id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "githubId_ASC"
  | "githubId_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "slackId_ASC"
  | "slackId_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "productName_ASC"
  | "productName_DESC";

export type ProductRoleOrderByInput = "id_ASC" | "id_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "groupName_ASC"
  | "groupName_DESC";

export type ProjectRoleOrderByInput = "id_ASC" | "id_DESC";

export type RoleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "roleName_ASC"
  | "roleName_DESC";

export type ProductRoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface LambdaRoleCreateInput {
  person: PersonCreateOneInput;
  role: RoleCreateOneInput;
}

export interface ProductUpdateManyMutationInput {
  productName?: Maybe<String>;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ProductUpdateInput {
  productName?: Maybe<String>;
}

export type LambdaRoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface RoleUpdateManyMutationInput {
  roleName?: Maybe<String>;
}

export interface ProductCreateInput {
  productName?: Maybe<String>;
}

export interface PersonWhereInput {
  labs_id?: Maybe<Int>;
  labs_id_not?: Maybe<Int>;
  labs_id_in?: Maybe<Int[] | Int>;
  labs_id_not_in?: Maybe<Int[] | Int>;
  labs_id_lt?: Maybe<Int>;
  labs_id_lte?: Maybe<Int>;
  labs_id_gt?: Maybe<Int>;
  labs_id_gte?: Maybe<Int>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  githubId?: Maybe<String>;
  githubId_not?: Maybe<String>;
  githubId_in?: Maybe<String[] | String>;
  githubId_not_in?: Maybe<String[] | String>;
  githubId_lt?: Maybe<String>;
  githubId_lte?: Maybe<String>;
  githubId_gt?: Maybe<String>;
  githubId_gte?: Maybe<String>;
  githubId_contains?: Maybe<String>;
  githubId_not_contains?: Maybe<String>;
  githubId_starts_with?: Maybe<String>;
  githubId_not_starts_with?: Maybe<String>;
  githubId_ends_with?: Maybe<String>;
  githubId_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  slackId?: Maybe<String>;
  slackId_not?: Maybe<String>;
  slackId_in?: Maybe<String[] | String>;
  slackId_not_in?: Maybe<String[] | String>;
  slackId_lt?: Maybe<String>;
  slackId_lte?: Maybe<String>;
  slackId_gt?: Maybe<String>;
  slackId_gte?: Maybe<String>;
  slackId_contains?: Maybe<String>;
  slackId_not_contains?: Maybe<String>;
  slackId_starts_with?: Maybe<String>;
  slackId_not_starts_with?: Maybe<String>;
  slackId_ends_with?: Maybe<String>;
  slackId_not_ends_with?: Maybe<String>;
  AND?: Maybe<PersonWhereInput[] | PersonWhereInput>;
  OR?: Maybe<PersonWhereInput[] | PersonWhereInput>;
  NOT?: Maybe<PersonWhereInput[] | PersonWhereInput>;
}

export interface ProjectWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export interface LambdaRoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LambdaRoleWhereInput>;
  AND?: Maybe<
    LambdaRoleSubscriptionWhereInput[] | LambdaRoleSubscriptionWhereInput
  >;
  OR?: Maybe<
    LambdaRoleSubscriptionWhereInput[] | LambdaRoleSubscriptionWhereInput
  >;
  NOT?: Maybe<
    LambdaRoleSubscriptionWhereInput[] | LambdaRoleSubscriptionWhereInput
  >;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface ProjectRoleUpdateInput {
  person?: Maybe<PersonUpdateOneRequiredInput>;
  product?: Maybe<ProductUpdateOneRequiredInput>;
  role?: Maybe<RoleUpdateOneRequiredInput>;
}

export interface PersonUpdateManyMutationInput {
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  githubId?: Maybe<String>;
  lastname?: Maybe<String>;
  slackId?: Maybe<String>;
}

export type PersonWhereUniqueInput = AtLeastOne<{
  labs_id: Maybe<Int>;
}>;

export interface PersonUpdateInput {
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  githubId?: Maybe<String>;
  lastname?: Maybe<String>;
  slackId?: Maybe<String>;
}

export interface ProjectUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface RoleUpsertNestedInput {
  update: RoleUpdateDataInput;
  create: RoleCreateInput;
}

export interface ProjectCreateInput {
  name?: Maybe<String>;
}

export type ProjectRoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ProductUpsertNestedInput {
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface RoleUpdateDataInput {
  roleName?: Maybe<String>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface ProjectRoleWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  person?: Maybe<PersonWhereInput>;
  product?: Maybe<ProductWhereInput>;
  role?: Maybe<RoleWhereInput>;
  AND?: Maybe<ProjectRoleWhereInput[] | ProjectRoleWhereInput>;
  OR?: Maybe<ProjectRoleWhereInput[] | ProjectRoleWhereInput>;
  NOT?: Maybe<ProjectRoleWhereInput[] | ProjectRoleWhereInput>;
}

export interface ProductUpdateOneRequiredInput {
  create?: Maybe<ProductCreateInput>;
  update?: Maybe<ProductUpdateDataInput>;
  upsert?: Maybe<ProductUpsertNestedInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface GroupWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  groupName?: Maybe<String>;
  groupName_not?: Maybe<String>;
  groupName_in?: Maybe<String[] | String>;
  groupName_not_in?: Maybe<String[] | String>;
  groupName_lt?: Maybe<String>;
  groupName_lte?: Maybe<String>;
  groupName_gt?: Maybe<String>;
  groupName_gte?: Maybe<String>;
  groupName_contains?: Maybe<String>;
  groupName_not_contains?: Maybe<String>;
  groupName_starts_with?: Maybe<String>;
  groupName_not_starts_with?: Maybe<String>;
  groupName_ends_with?: Maybe<String>;
  groupName_not_ends_with?: Maybe<String>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleWhereInput>;
  AND?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  OR?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  NOT?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
}

export interface RoleUpdateOneRequiredInput {
  create?: Maybe<RoleCreateInput>;
  update?: Maybe<RoleUpdateDataInput>;
  upsert?: Maybe<RoleUpsertNestedInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface ProductRoleWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  person?: Maybe<PersonWhereInput>;
  product?: Maybe<ProductWhereInput>;
  role?: Maybe<RoleWhereInput>;
  AND?: Maybe<ProductRoleWhereInput[] | ProductRoleWhereInput>;
  OR?: Maybe<ProductRoleWhereInput[] | ProductRoleWhereInput>;
  NOT?: Maybe<ProductRoleWhereInput[] | ProductRoleWhereInput>;
}

export interface PersonUpsertNestedInput {
  update: PersonUpdateDataInput;
  create: PersonCreateInput;
}

export interface ProductRoleCreateInput {
  person: PersonCreateOneInput;
  product: ProductCreateOneInput;
  role: RoleCreateOneInput;
}

export interface PersonUpdateDataInput {
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  githubId?: Maybe<String>;
  lastname?: Maybe<String>;
  slackId?: Maybe<String>;
}

export interface LambdaRoleWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  person?: Maybe<PersonWhereInput>;
  role?: Maybe<RoleWhereInput>;
  AND?: Maybe<LambdaRoleWhereInput[] | LambdaRoleWhereInput>;
  OR?: Maybe<LambdaRoleWhereInput[] | LambdaRoleWhereInput>;
  NOT?: Maybe<LambdaRoleWhereInput[] | LambdaRoleWhereInput>;
}

export type RoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface RoleUpdateInput {
  roleName?: Maybe<String>;
}

export interface ProjectRoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectRoleWhereInput>;
  AND?: Maybe<
    ProjectRoleSubscriptionWhereInput[] | ProjectRoleSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProjectRoleSubscriptionWhereInput[] | ProjectRoleSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProjectRoleSubscriptionWhereInput[] | ProjectRoleSubscriptionWhereInput
  >;
}

export interface PersonSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PersonWhereInput>;
  AND?: Maybe<PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput>;
  OR?: Maybe<PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput>;
  NOT?: Maybe<PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput>;
}

export interface PersonUpdateOneRequiredInput {
  create?: Maybe<PersonCreateInput>;
  update?: Maybe<PersonUpdateDataInput>;
  upsert?: Maybe<PersonUpsertNestedInput>;
  connect?: Maybe<PersonWhereUniqueInput>;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface LambdaRoleUpdateInput {
  person?: Maybe<PersonUpdateOneRequiredInput>;
  role?: Maybe<RoleUpdateOneRequiredInput>;
}

export interface ProductUpdateDataInput {
  productName?: Maybe<String>;
}

export interface RoleCreateInput {
  roleName?: Maybe<String>;
}

export interface ProductCreateOneInput {
  create?: Maybe<ProductCreateInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface RoleCreateOneInput {
  create?: Maybe<RoleCreateInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface PersonCreateInput {
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  githubId?: Maybe<String>;
  lastname?: Maybe<String>;
  slackId?: Maybe<String>;
}

export interface ProjectRoleCreateInput {
  person: PersonCreateOneInput;
  product: ProductCreateOneInput;
  role: RoleCreateOneInput;
}

export interface ProductWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  productName?: Maybe<String>;
  productName_not?: Maybe<String>;
  productName_in?: Maybe<String[] | String>;
  productName_not_in?: Maybe<String[] | String>;
  productName_lt?: Maybe<String>;
  productName_lte?: Maybe<String>;
  productName_gt?: Maybe<String>;
  productName_gte?: Maybe<String>;
  productName_contains?: Maybe<String>;
  productName_not_contains?: Maybe<String>;
  productName_starts_with?: Maybe<String>;
  productName_not_starts_with?: Maybe<String>;
  productName_ends_with?: Maybe<String>;
  productName_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface PersonCreateOneInput {
  create?: Maybe<PersonCreateInput>;
  connect?: Maybe<PersonWhereUniqueInput>;
}

export interface GroupUpdateManyMutationInput {
  groupName?: Maybe<String>;
}

export interface GroupUpdateInput {
  groupName?: Maybe<String>;
}

export interface GroupCreateInput {
  groupName?: Maybe<String>;
}

export interface ProductRoleUpdateInput {
  person?: Maybe<PersonUpdateOneRequiredInput>;
  product?: Maybe<ProductUpdateOneRequiredInput>;
  role?: Maybe<RoleUpdateOneRequiredInput>;
}

export interface ProjectUpdateInput {
  name?: Maybe<String>;
}

export interface RoleWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  roleName?: Maybe<String>;
  roleName_not?: Maybe<String>;
  roleName_in?: Maybe<String[] | String>;
  roleName_not_in?: Maybe<String[] | String>;
  roleName_lt?: Maybe<String>;
  roleName_lte?: Maybe<String>;
  roleName_gt?: Maybe<String>;
  roleName_gte?: Maybe<String>;
  roleName_contains?: Maybe<String>;
  roleName_not_contains?: Maybe<String>;
  roleName_starts_with?: Maybe<String>;
  roleName_not_starts_with?: Maybe<String>;
  roleName_ends_with?: Maybe<String>;
  roleName_not_ends_with?: Maybe<String>;
  AND?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  OR?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  NOT?: Maybe<RoleWhereInput[] | RoleWhereInput>;
}

export interface ProductRoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductRoleWhereInput>;
  AND?: Maybe<
    ProductRoleSubscriptionWhereInput[] | ProductRoleSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProductRoleSubscriptionWhereInput[] | ProductRoleSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProductRoleSubscriptionWhereInput[] | ProductRoleSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface LambdaRoleEdge {
  node: LambdaRole;
  cursor: String;
}

export interface LambdaRoleEdgePromise
  extends Promise<LambdaRoleEdge>,
    Fragmentable {
  node: <T = LambdaRolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LambdaRoleEdgeSubscription
  extends Promise<AsyncIterator<LambdaRoleEdge>>,
    Fragmentable {
  node: <T = LambdaRoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RolePreviousValues {
  id: Int;
  roleName?: String;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  roleName: () => Promise<String>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  roleName: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ProjectRoleSubscriptionPayload {
  mutation: MutationType;
  node: ProjectRole;
  updatedFields: String[];
  previousValues: ProjectRolePreviousValues;
}

export interface ProjectRoleSubscriptionPayloadPromise
  extends Promise<ProjectRoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectRolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectRolePreviousValuesPromise>() => T;
}

export interface ProjectRoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectRoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectRoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectRolePreviousValuesSubscription>() => T;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  node: Role;
  updatedFields: String[];
  previousValues: RolePreviousValues;
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface LambdaRoleConnection {
  pageInfo: PageInfo;
  edges: LambdaRoleEdge[];
}

export interface LambdaRoleConnectionPromise
  extends Promise<LambdaRoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LambdaRoleEdge>>() => T;
  aggregate: <T = AggregateLambdaRolePromise>() => T;
}

export interface LambdaRoleConnectionSubscription
  extends Promise<AsyncIterator<LambdaRoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LambdaRoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLambdaRoleSubscription>() => T;
}

export interface Role {
  id: Int;
  roleName?: String;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<Int>;
  roleName: () => Promise<String>;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  roleName: () => Promise<AsyncIterator<String>>;
}

export interface RoleNullablePromise
  extends Promise<Role | null>,
    Fragmentable {
  id: () => Promise<Int>;
  roleName: () => Promise<String>;
}

export interface RoleEdge {
  node: Role;
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Person {
  labs_id: Int;
  email?: String;
  firstname?: String;
  githubId?: String;
  lastname?: String;
  slackId?: String;
}

export interface PersonPromise extends Promise<Person>, Fragmentable {
  labs_id: () => Promise<Int>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  githubId: () => Promise<String>;
  lastname: () => Promise<String>;
  slackId: () => Promise<String>;
}

export interface PersonSubscription
  extends Promise<AsyncIterator<Person>>,
    Fragmentable {
  labs_id: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  firstname: () => Promise<AsyncIterator<String>>;
  githubId: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  slackId: () => Promise<AsyncIterator<String>>;
}

export interface PersonNullablePromise
  extends Promise<Person | null>,
    Fragmentable {
  labs_id: () => Promise<Int>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  githubId: () => Promise<String>;
  lastname: () => Promise<String>;
  slackId: () => Promise<String>;
}

export interface AggregateProjectRole {
  count: Int;
}

export interface AggregateProjectRolePromise
  extends Promise<AggregateProjectRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectRoleSubscription
  extends Promise<AsyncIterator<AggregateProjectRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LambdaRole {
  id: Int;
}

export interface LambdaRolePromise extends Promise<LambdaRole>, Fragmentable {
  id: () => Promise<Int>;
  person: <T = PersonPromise>() => T;
  role: <T = RolePromise>() => T;
}

export interface LambdaRoleSubscription
  extends Promise<AsyncIterator<LambdaRole>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  person: <T = PersonSubscription>() => T;
  role: <T = RoleSubscription>() => T;
}

export interface LambdaRoleNullablePromise
  extends Promise<LambdaRole | null>,
    Fragmentable {
  id: () => Promise<Int>;
  person: <T = PersonPromise>() => T;
  role: <T = RolePromise>() => T;
}

export interface ProjectRoleConnection {
  pageInfo: PageInfo;
  edges: ProjectRoleEdge[];
}

export interface ProjectRoleConnectionPromise
  extends Promise<ProjectRoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectRoleEdge>>() => T;
  aggregate: <T = AggregateProjectRolePromise>() => T;
}

export interface ProjectRoleConnectionSubscription
  extends Promise<AsyncIterator<ProjectRoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectRoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectRoleSubscription>() => T;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupPreviousValues {
  id: Int;
  groupName?: String;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  groupName: () => Promise<String>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  groupName: () => Promise<AsyncIterator<String>>;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateProductRole {
  count: Int;
}

export interface AggregateProductRolePromise
  extends Promise<AggregateProductRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductRoleSubscription
  extends Promise<AsyncIterator<AggregateProductRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LambdaRoleSubscriptionPayload {
  mutation: MutationType;
  node: LambdaRole;
  updatedFields: String[];
  previousValues: LambdaRolePreviousValues;
}

export interface LambdaRoleSubscriptionPayloadPromise
  extends Promise<LambdaRoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LambdaRolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LambdaRolePreviousValuesPromise>() => T;
}

export interface LambdaRoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LambdaRoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LambdaRoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LambdaRolePreviousValuesSubscription>() => T;
}

export interface ProductRoleConnection {
  pageInfo: PageInfo;
  edges: ProductRoleEdge[];
}

export interface ProductRoleConnectionPromise
  extends Promise<ProductRoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductRoleEdge>>() => T;
  aggregate: <T = AggregateProductRolePromise>() => T;
}

export interface ProductRoleConnectionSubscription
  extends Promise<AsyncIterator<ProductRoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductRoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductRoleSubscription>() => T;
}

export interface LambdaRolePreviousValues {
  id: Int;
}

export interface LambdaRolePreviousValuesPromise
  extends Promise<LambdaRolePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
}

export interface LambdaRolePreviousValuesSubscription
  extends Promise<AsyncIterator<LambdaRolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface PersonSubscriptionPayload {
  mutation: MutationType;
  node: Person;
  updatedFields: String[];
  previousValues: PersonPreviousValues;
}

export interface PersonSubscriptionPayloadPromise
  extends Promise<PersonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonPreviousValuesPromise>() => T;
}

export interface PersonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonPreviousValuesSubscription>() => T;
}

export interface AggregatePerson {
  count: Int;
}

export interface AggregatePersonPromise
  extends Promise<AggregatePerson>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonSubscription
  extends Promise<AsyncIterator<AggregatePerson>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonPreviousValues {
  labs_id: Int;
  email?: String;
  firstname?: String;
  githubId?: String;
  lastname?: String;
  slackId?: String;
}

export interface PersonPreviousValuesPromise
  extends Promise<PersonPreviousValues>,
    Fragmentable {
  labs_id: () => Promise<Int>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  githubId: () => Promise<String>;
  lastname: () => Promise<String>;
  slackId: () => Promise<String>;
}

export interface PersonPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonPreviousValues>>,
    Fragmentable {
  labs_id: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  firstname: () => Promise<AsyncIterator<String>>;
  githubId: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  slackId: () => Promise<AsyncIterator<String>>;
}

export interface PersonConnection {
  pageInfo: PageInfo;
  edges: PersonEdge[];
}

export interface PersonConnectionPromise
  extends Promise<PersonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonEdge>>() => T;
  aggregate: <T = AggregatePersonPromise>() => T;
}

export interface PersonConnectionSubscription
  extends Promise<AsyncIterator<PersonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonSubscription>() => T;
}

export interface Group {
  id: Int;
  groupName?: String;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<Int>;
  groupName: () => Promise<String>;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  groupName: () => Promise<AsyncIterator<String>>;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<Int>;
  groupName: () => Promise<String>;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProjectRoleEdge {
  node: ProjectRole;
  cursor: String;
}

export interface ProjectRoleEdgePromise
  extends Promise<ProjectRoleEdge>,
    Fragmentable {
  node: <T = ProjectRolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectRoleEdgeSubscription
  extends Promise<AsyncIterator<ProjectRoleEdge>>,
    Fragmentable {
  node: <T = ProjectRoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductPreviousValues {
  id: Int;
  productName?: String;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  productName: () => Promise<String>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  productName: () => Promise<AsyncIterator<String>>;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductRoleEdge {
  node: ProductRole;
  cursor: String;
}

export interface ProductRoleEdgePromise
  extends Promise<ProductRoleEdge>,
    Fragmentable {
  node: <T = ProductRolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductRoleEdgeSubscription
  extends Promise<AsyncIterator<ProductRoleEdge>>,
    Fragmentable {
  node: <T = ProductRoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductRoleSubscriptionPayload {
  mutation: MutationType;
  node: ProductRole;
  updatedFields: String[];
  previousValues: ProductRolePreviousValues;
}

export interface ProductRoleSubscriptionPayloadPromise
  extends Promise<ProductRoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductRolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductRolePreviousValuesPromise>() => T;
}

export interface ProductRoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductRoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductRoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductRolePreviousValuesSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductRolePreviousValues {
  id: Int;
}

export interface ProductRolePreviousValuesPromise
  extends Promise<ProductRolePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
}

export interface ProductRolePreviousValuesSubscription
  extends Promise<AsyncIterator<ProductRolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
}

export interface PersonEdge {
  node: Person;
  cursor: String;
}

export interface PersonEdgePromise extends Promise<PersonEdge>, Fragmentable {
  node: <T = PersonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonEdgeSubscription
  extends Promise<AsyncIterator<PersonEdge>>,
    Fragmentable {
  node: <T = PersonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RoleConnection {
  pageInfo: PageInfo;
  edges: RoleEdge[];
}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface ProjectRolePreviousValues {
  id: Int;
}

export interface ProjectRolePreviousValuesPromise
  extends Promise<ProjectRolePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
}

export interface ProjectRolePreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectRolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectPreviousValues {
  id: Int;
  name?: String;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface ProjectRole {
  id: Int;
}

export interface ProjectRolePromise extends Promise<ProjectRole>, Fragmentable {
  id: () => Promise<Int>;
  person: <T = PersonPromise>() => T;
  product: <T = ProductPromise>() => T;
  role: <T = RolePromise>() => T;
}

export interface ProjectRoleSubscription
  extends Promise<AsyncIterator<ProjectRole>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  person: <T = PersonSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  role: <T = RoleSubscription>() => T;
}

export interface ProjectRoleNullablePromise
  extends Promise<ProjectRole | null>,
    Fragmentable {
  id: () => Promise<Int>;
  person: <T = PersonPromise>() => T;
  product: <T = ProductPromise>() => T;
  role: <T = RolePromise>() => T;
}

export interface AggregateLambdaRole {
  count: Int;
}

export interface AggregateLambdaRolePromise
  extends Promise<AggregateLambdaRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLambdaRoleSubscription
  extends Promise<AsyncIterator<AggregateLambdaRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Product {
  id: Int;
  productName?: String;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<Int>;
  productName: () => Promise<String>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  productName: () => Promise<AsyncIterator<String>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<Int>;
  productName: () => Promise<String>;
}

export interface ProductRole {
  id: Int;
}

export interface ProductRolePromise extends Promise<ProductRole>, Fragmentable {
  id: () => Promise<Int>;
  person: <T = PersonPromise>() => T;
  product: <T = ProductPromise>() => T;
  role: <T = RolePromise>() => T;
}

export interface ProductRoleSubscription
  extends Promise<AsyncIterator<ProductRole>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  person: <T = PersonSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  role: <T = RoleSubscription>() => T;
}

export interface ProductRoleNullablePromise
  extends Promise<ProductRole | null>,
    Fragmentable {
  id: () => Promise<Int>;
  person: <T = PersonPromise>() => T;
  product: <T = ProductPromise>() => T;
  role: <T = RolePromise>() => T;
}

export interface Project {
  id: Int;
  name?: String;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Person",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "ProductRole",
    embedded: false
  },
  {
    name: "ProjectRole",
    embedded: false
  },
  {
    name: "LambdaRole",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
