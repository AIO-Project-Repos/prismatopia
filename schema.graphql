#import Project from "./generated/graphql-schema/prisma-schema.graphql";


type Query {
    lambdaRole(where: LambdaRoleWhereUniqueInput!): LambdaRole
    lambdaRoles(where: LambdaRoleWhereInput, orderBy: LambdaRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LambdaRole]!
    peopleGroup(where: PeopleGroupWhereUniqueInput!): PeopleGroup
    peopleGroups(where: PeopleGroupWhereInput, orderBy: PeopleGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PeopleGroup]!
    peopleGroupMember(where: PeopleGroupMemberWhereUniqueInput!): PeopleGroupMember
    peopleGroupMembers(where: PeopleGroupMemberWhereInput, orderBy: PeopleGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PeopleGroupMember]!
    person(where: PersonWhereUniqueInput!): Person
    persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
    product(where: ProductWhereUniqueInput!): Product
    products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
    productRole(where: ProductRoleWhereUniqueInput!): ProductRole
    productRoles(where: ProductRoleWhereInput, orderBy: ProductRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRole]!
    project(where: ProjectWhereUniqueInput!): Project
    projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
    projectGroup(where: ProjectGroupWhereUniqueInput!): ProjectGroup
    projectGroups(where: ProjectGroupWhereInput, orderBy: ProjectGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectGroup]!
    projectGroupMember(where: ProjectGroupMemberWhereUniqueInput!): ProjectGroupMember
    projectGroupMembers(where: ProjectGroupMemberWhereInput, orderBy: ProjectGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectGroupMember]!
    projectRole(where: ProjectRoleWhereUniqueInput!): ProjectRole
    projectRoles(where: ProjectRoleWhereInput, orderBy: ProjectRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRole]!
    role(where: RoleWhereUniqueInput!): Role
    roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!

}
type Mutation {
    createLambdaRole(data: LambdaRoleCreateInput!): LambdaRole!
    updateLambdaRole(data: LambdaRoleUpdateInput!, where: LambdaRoleWhereUniqueInput!): LambdaRole
    deleteLambdaRole(where: LambdaRoleWhereUniqueInput!): LambdaRole
    createPeopleGroup(data: PeopleGroupCreateInput!): PeopleGroup!
    updatePeopleGroup(data: PeopleGroupUpdateInput!, where: PeopleGroupWhereUniqueInput!): PeopleGroup
    deletePeopleGroup(where: PeopleGroupWhereUniqueInput!): PeopleGroup
    createPeopleGroupMember(data: PeopleGroupMemberCreateInput!): PeopleGroupMember!
    updatePeopleGroupMember(data: PeopleGroupMemberUpdateInput!, where: PeopleGroupMemberWhereUniqueInput!): PeopleGroupMember
    deletePeopleGroupMember(where: PeopleGroupMemberWhereUniqueInput!): PeopleGroupMember
    createPerson(data: PersonCreateInput!): Person!
    updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
    deletePerson(where: PersonWhereUniqueInput!): Person
    createProduct(data: ProductCreateInput!): Product!
    updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
    deleteProduct(where: ProductWhereUniqueInput!): Product
    createProductRole(data: ProductRoleCreateInput!): ProductRole!
    updateProductRole(data: ProductRoleUpdateInput!, where: ProductRoleWhereUniqueInput!): ProductRole
    deleteProductRole(where: ProductRoleWhereUniqueInput!): ProductRole
    createProject(data: ProjectCreateInput!): Project!
    updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
    deleteProject(where: ProjectWhereUniqueInput!): Project
    createProjectGroup(data: ProjectGroupCreateInput!): ProjectGroup!
    updateProjectGroup(data: ProjectGroupUpdateInput!, where: ProjectGroupWhereUniqueInput!): ProjectGroup
    deleteProjectGroup(where: ProjectGroupWhereUniqueInput!): ProjectGroup
    createProjectGroupMember(data: ProjectGroupMemberCreateInput!): ProjectGroupMember!
    updateProjectGroupMember(data: ProjectGroupMemberUpdateInput!, where: ProjectGroupMemberWhereUniqueInput!): ProjectGroupMember
    deleteProjectGroupMember(where: ProjectGroupMemberWhereUniqueInput!): ProjectGroupMember
    createProjectRole(data: ProjectRoleCreateInput!): ProjectRole!
    updateProjectRole(data: ProjectRoleUpdateInput!, where: ProjectRoleWhereUniqueInput!): ProjectRole
    deleteProjectRole(where: ProjectRoleWhereUniqueInput!): ProjectRole
    createRole(data: RoleCreateInput!): Role!
    updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
    deleteRole(where: RoleWhereUniqueInput!): Role
}